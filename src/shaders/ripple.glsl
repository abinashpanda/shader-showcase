/**
DO NOT EDIT THIS FILE!

It should be only used as a template for creating new ray-marcher.
*/

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .001
#define PI 3.14159264

precision mediump float;

varying vec2 uv;

uniform float uTick;
uniform sampler2D uPattern;

mat2 rotate(float angle) {
  float s = sin(angle);
  float c = cos(angle);
  return mat2(c, -s, s, c);
}

#define NUM_OCTAVES 5

float rand(vec2 n) {
  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

float noise(vec2 p) {
  vec2 ip = floor(p);
  vec2 u = fract(p);
  u = u * u * (3.0 - 2.0 * u);

  float res = mix(mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x), mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);
  return res * res;
}

float fbm(vec2 x) {
  float v = 0.0;
  float a = 0.5;
  vec2 shift = vec2(100);
	// Rotate to reduce axial bias
  mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
  for(int i = 0; i < NUM_OCTAVES; ++i) {
    v += a * noise(x);
    x = rot * x * 2.0 + shift;
    a *= 0.5;
  }
  return v;
}

void main() {
  float time = uTick * 0.01;
  float t = sin(time) * sin(time);
  t = exponentialIn(t);

  vec2 cPos = 2.0 * uv - 1.0;
  float cLength = length(cPos);

  float r = length(cPos);
  r += time * 0.5;
  r = fract(r);

  float segments = 10.0;
  float angle = atan(cPos.y, cPos.x);
  angle /= PI * 2.0;
  angle *= segments;
  angle = fract(angle);
  angle += mix(0.0, PI, t);
  angle /= segments;
  angle *= PI * 2.0;

  vec2 point = vec2(r * cos(angle), r * sin(angle));
  point *= rotate(mix(5.0, 5.5, 1.0 - t));

  float f = smoothstep(0.0, 1.0, uv.x);

  vec2 disp = cPos / cLength * cos(cLength * 12.0 - 4.0 * time) * 0.03;
  disp += (cPos - vec2(0.05, 0.05)) / cLength * cos(cLength * 12.0 - 9.0 * time) * 0.02;
  vec4 color = texture2D(uPattern, point + disp);

  gl_FragColor = color;
}