/**
DO NOT EDIT THIS FILE!

It should be only used as a template for creating new ray-marcher.
*/

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .001
#define T uTick * 0.01
#define TAU 6.2831

precision mediump float;

varying vec2 uv;

uniform float uTick;
uniform float uAspectRatio;
uniform vec2 uMouse;
uniform vec2 uResolution;

// helper utitlity functions

mat2 rotate(float angle) {
  float s = sin(angle);
  float c = cos(angle);
  return mat2(c, -s, s, c);
}

// smooth min functions

float smin(float a, float b, float k) {
  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
  return mix(b, a, h) - k * h * (1.0 - h);
}

// sdf
float sdGyroid(vec3 point, float scale, float width, float bias) {
  point *= scale;
  point -= T;
  return abs((dot(sin(point), cos(point.zxy)) - bias) / scale) - width;
}

float sdSphere(vec3 point, float radius) {
  return length(point) - radius;
}

float sdBox(vec3 point, vec3 size) {
  point = abs(point) - size;
  return length(max(point, 0.)) + min(max(point.x, max(point.y, point.z)), 0.);
}

vec3 transform(vec3 point) {
  point.zx *= rotate(T * 0.5);
  return point;
}

// ray march functions

float getDistance(vec3 point) {
  point = transform(point);

  float sphere = sdSphere(point, 1.0);
  sphere = abs(sphere) - 0.04;

  float g1 = sdGyroid(point, 8.34, 0.04, 0.9);
  float g2 = sdGyroid(point, 15.78, 0.04, 0.1);
  float g3 = sdGyroid(point, 33.78, 0.04, 0.1);
  float g4 = sdGyroid(point, 67.78, 0.04, 0.1);
  float g5 = sdGyroid(point, 123.97, 0.04, 0.1);

  g1 -= g2 * 0.5;
  g1 -= g3 * 0.2;
  g1 -= g4 * 0.2;
  g1 -= g5 * 0.1;

  sphere -= g2 * 0.05;
  sphere -= g3 * 0.05;
  sphere -= g4 * 0.05;
  sphere -= g5 * 0.025;

  float lowerLimit = -0.2 * (sin(T) * 0.5 + 0.5);
  float upperLimit = 0.7 * (sin(T + 13.678 * TAU) * 0.5 + 0.5);
  float gyroid = g1 * smoothstep(lowerLimit, upperLimit, point.y);

  float d = smin(sphere, gyroid * 0.8, -0.03);
  return d;
}

float rayMarch(vec3 rayOrigin, vec3 rayDirection) {
  float dO = 0.;

  for(int i = 0; i < MAX_STEPS; i++) {
    vec3 point = rayOrigin + rayDirection * dO;
    float dS = getDistance(point);
    dO += dS;
    if(dO > MAX_DIST || abs(dS) < SURF_DIST)
      break;
  }

  return dO;
}

vec3 getNormal(vec3 point) {
  float d = getDistance(point);
  vec2 epsilon = vec2(.001, 0);
  vec3 n = d - vec3(getDistance(point - epsilon.xyy), getDistance(point - epsilon.yxy), getDistance(point - epsilon.yyx));
  return normalize(n);
}

vec3 getRayDirection(vec2 uv, vec3 cameraPosition, vec3 lookatPoint, float zoom) {
  vec3 forward = normalize(lookatPoint - cameraPosition);
  vec3 right = normalize(cross(vec3(0, 1, 0), forward));
  vec3 up = cross(forward, right);
  vec3 center = forward * zoom;
  vec3 pointOnScreen = center + uv.x * right + uv.y * up;
  return normalize(pointOnScreen);
}

vec3 background(vec3 rayDirection) {
  float y = smoothstep(-0.5, 0.5, rayDirection.y);
  return mix(vec3(0.0), vec3(0.05), y);
}

void main() {
  vec2 pos = (uv - vec2(0.5)) * vec2(uAspectRatio, 1);
  vec2 mouse = uMouse / uResolution;

  vec3 rayOrigin = vec3(0, 0, -3);
  rayOrigin.yz *= rotate(-mouse.y * 3.14 + 1.);
  rayOrigin.xz *= rotate(-mouse.x * 6.2831);

  vec3 rayDirection = getRayDirection(pos, rayOrigin, vec3(0, 0., 0), 1.);
  vec3 color = background(rayDirection);

  float d = rayMarch(rayOrigin, rayDirection);
  if(d < MAX_DIST) {
    vec3 p = rayOrigin + rayDirection * d;
    vec3 n = getNormal(p);

    p = transform(p);

    // vec3 diffuseLighting = abs(n);
    float diffuseLighting = n.y * 0.5 + 0.5;
    diffuseLighting *= 2.0;
    // diffuseLighting *= 2.0;

    vec3 materialColor = mix(vec3(0.8, 0.1, 0.1), vec3(0.1, 0.1, 0.8), smoothstep(-0.5, 0.5, p.y));
    color = diffuseLighting * materialColor;

    float g2 = sdGyroid(p, 15.78, 0.04, 0.1);
    float g3 = sdGyroid(p, 33.78, 0.04, 0.1);
    float g = g2 * 0.9 + g3 * 0.5;
    // point to center is same as p
    float width = smoothstep(1.0, -1.0, p.y) * 0.9 + 0.1;
    color *= smoothstep(-width, width, g);

    vec3 glowColor = mix(vec3(1.0, 1.0, 0.1), vec3(1.0, 0.1, 1.0), smoothstep(-0.5, 0.5, p.y));
    // vec3 glowColor = vec3(1.0);
    color += abs(g) * glowColor * 0.5;
    // color = vec3(diffuseLighting);
  }

  // gamma correction
  color = pow(color, vec3(.4545));

  gl_FragColor = vec4(color, 1.0);
}